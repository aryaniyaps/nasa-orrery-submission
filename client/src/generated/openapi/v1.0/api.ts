/* tslint:disable */
/* eslint-disable */
/**
 * Orrery Visualizer HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * PlanetsApi - axios parameter creator
 * @export
 */
export const PlanetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read Planet Positions
         * @param {string} targetDate Date to read planet positions for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPlanetPositions: async (targetDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetDate' is not null or undefined
            assertParamExists('readPlanetPositions', 'targetDate', targetDate)
            const localVarPath = `/planets/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (targetDate !== undefined) {
                localVarQueryParameter['target_date'] = (targetDate as any instanceof Date) ?
                    (targetDate as any).toISOString().substring(0,10) :
                    targetDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlanetsApi - functional programming interface
 * @export
 */
export const PlanetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlanetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read Planet Positions
         * @param {string} targetDate Date to read planet positions for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPlanetPositions(targetDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readPlanetPositions(targetDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanetsApi.readPlanetPositions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlanetsApi - factory interface
 * @export
 */
export const PlanetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlanetsApiFp(configuration)
    return {
        /**
         * 
         * @summary Read Planet Positions
         * @param {string} targetDate Date to read planet positions for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPlanetPositions(targetDate: string, options?: any): AxiosPromise<any> {
            return localVarFp.readPlanetPositions(targetDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlanetsApi - interface
 * @export
 * @interface PlanetsApi
 */
export interface PlanetsApiInterface {
    /**
     * 
     * @summary Read Planet Positions
     * @param {string} targetDate Date to read planet positions for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanetsApiInterface
     */
    readPlanetPositions(targetDate: string, options?: RawAxiosRequestConfig): AxiosPromise<any>;

}

/**
 * PlanetsApi - object-oriented interface
 * @export
 * @class PlanetsApi
 * @extends {BaseAPI}
 */
export class PlanetsApi extends BaseAPI implements PlanetsApiInterface {
    /**
     * 
     * @summary Read Planet Positions
     * @param {string} targetDate Date to read planet positions for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanetsApi
     */
    public readPlanetPositions(targetDate: string, options?: RawAxiosRequestConfig) {
        return PlanetsApiFp(this.configuration).readPlanetPositions(targetDate, options).then((request) => request(this.axios, this.basePath));
    }
}



